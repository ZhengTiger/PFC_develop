---
author: "Hu Zheng"
date: "2024-12-01"
date-format: YYYY-MM-DD
---

# hdWGCNA 分析

```{r}
library(tidyverse)
library(Seurat)
library(WGCNA)
library(hdWGCNA)
library(ggplot2)
library(cowplot)
library(patchwork)
library(igraph)

set.seed(12345)
```

```{r}
seu.harmony <- readRDS('../../data/rds/seu.harmony.rds')
seu.harmony.metadata <- readRDS('../../data/rds/seu.harmony.metadata.rds')
seu.harmony@meta.data <- seu.harmony.metadata
```

```{r}
seu.Ex <- seu.harmony[,seu.harmony$SubType_v4 %in% names(col_SubType)[1:11]]
seu.IT <- subset(seu.harmony, cells=colnames(seu.harmony)[which(
  seu.harmony$SubType_v4 %in% c("Im L2/3 IT","Im L4/5 IT","Im L5 IT","Im L6 IT","L2/3 IT","L4/5 IT","L5 IT","L6 IT")
)])
```


```{r}
gene_lib <- read.csv('../../data/rds/Figure2/gene_lib.csv')

AG <- unique(str_to_title(gene_lib$Axon_Guidance))
CAM <- unique(str_to_title(gene_lib$CAM))
all_gene <- unique(c(AG, CAM))

# filter
seu <- seu.Ex
all_gene <- all_gene[which(all_gene %in% rownames(seu))]
# gene expression filter
all_gene_exp <- AverageExpression(
  seu, features=all_gene, assays="RNA", slot="data", group.by="SubType_v4"
  )$RNA
all_gene_exp <- as.data.frame(log1p(all_gene_exp))
all_gene_exp$max <- apply(all_gene_exp, 1, max)
# gene cell percentage filter
all_gene_pct <- as.data.frame(t(as.matrix(seu@assays$RNA@data[all_gene,])))
all_gene_pct$SubType_v4 <- as.character(seu$SubType_v4)
all_gene_pct <- 
  all_gene_pct |>
  dplyr::group_by(SubType_v4) |>
  dplyr::summarize(across(1:length(all_gene), function(x){
    length(which(x>0))/length(x)
    })) |>
  as.data.frame()
rownames(all_gene_pct) <- all_gene_pct$SubType_v4
all_gene_pct <- as.data.frame(t(all_gene_pct[,-1]))
all_gene_pct$max <- apply(all_gene_pct, 1, max)

all_gene <- all_gene[which(all_gene_exp$max>0.1 & all_gene_pct$max>0.1)]
AG <- AG[which(AG %in% all_gene)]
CAM <- CAM[which(CAM %in% all_gene)]
AG <- AG[which(!(AG %in% CAM))]
all_gene <- c(CAM,AG)
```


```{r}
seurat_obj <- seu.Ex

seurat_obj <- SetupForWGCNA(
  seurat_obj,
  features = all_gene, # the gene selection approach
  wgcna_name = "CAM_AG" # the name of the hdWGCNA experiment
)

# construct metacells  in each group
seurat_obj <- MetacellsByGroups(
  seurat_obj = seurat_obj,
  group.by = c("SubType_v4", "orig.ident"), # specify the columns in seurat_obj@meta.data to group by
  reduction = 'harmony', # select the dimensionality reduction to perform KNN on
  k = 25, # nearest-neighbors parameter
  max_shared = 10, # maximum number of shared cells between two metacells
  ident.group = 'SubType_v4' # set the Idents of the metacell seurat object
)

# normalize metacell expression matrix:
seurat_obj <- NormalizeMetacells(seurat_obj)

seurat_obj <- SetDatExpr(
  seurat_obj,
  group_name = unique(seurat_obj$SubType_v4), # the name of the group of interest in the group.by column
  group.by='SubType_v4', # the metadata column containing the cell type info. This same column should have also been used in MetacellsByGroups
  assay = 'RNA', # using RNA assay
  slot = 'data' # using normalized data
)
```

```{r}
# Test different soft powers:
seurat_obj <- TestSoftPowers(
  seurat_obj,
  networkType = 'signed' # you can also use "unsigned" or "signed hybrid"
)

# plot the results:
plot_list <- PlotSoftPowers(seurat_obj)

# assemble with patchwork
wrap_plots(plot_list, ncol=2)
```

```{r}
# construct co-expression network:
seurat_obj <- ConstructNetwork(
  seurat_obj,
  soft_power = 10,
  minModuleSize = 20,
  tom_name = 'CAM_AG' # name of the topoligical overlap matrix written to disk
)

seurat_obj <- ScaleData(seurat_obj, features=VariableFeatures(seurat_obj))

seurat_obj <- ModuleEigengenes(
 seurat_obj,
 group.by.vars="orig.ident"
)

seurat_obj <- ModuleConnectivity(
  seurat_obj,
  group.by = 'SubType_v4', group_name = unique(seurat_obj$SubType_v4)
)

seurat_obj <- ResetModuleNames(
  seurat_obj,
  new_name = "M"
)

saveRDS(seurat_obj, "../../data/rds/Figure2/seu.Ex.hdwgcna.rds")
```


```{r fig.width=6, fig.height=6}
set.seed(20241212)

seurat_obj <- RunModuleUMAP(
  seurat_obj,
  n_hubs = 10, # number of hub genes to include for the UMAP embedding
  n_neighbors=25, # neighbors parameter for UMAP
  min_dist=0.5
)

ModuleUMAPPlot(
  seurat_obj,
  sample_edges=TRUE,
  edge_prop=0.2,
  label_hubs=5,
  edge.alpha = 0.25,
  keep_grey_edges=FALSE,
  vertex.label.cex = 0.01
)
```

```{r fig.width=4, fig.height=4}
modules <- GetModules(seurat_obj)
mods <- levels(modules$module)
mods <- mods[mods != 'grey']

Figure6_E <- 
  HubGeneNetworkPlot(
  seurat_obj,
  n_hubs = 5, n_other=100,
  edge_prop = 0.8,
  edge.alpha = 0.8,
  mods = mods,  
  return_graph=FALSE
)
```


```{r fig.width=5, fig.height=6}
SubType_order <- c(
  "Im L2/3 IT","Im L4/5 IT","Im L5 IT","Im L6 IT","L2/3 IT","L4/5 IT","L5 IT","L6 IT",
  "L5 PT","L5 NP","L6 CT"
  )
M_order <- c("M4","M5","M3","M1","M2")
M_color <- c("M1"="turquoise","M2"="yellow","M3"="green","M4"="brown","M5"="blue")

hub_df <- GetHubGenes(seurat_obj, n_hubs = 20)
hub_df$module <- factor(hub_df$module, levels = M_order)
hub_df <- hub_df[order(hub_df$module),]

seurat_obj$Cluster <- seurat_obj$SubType_v4
#seurat_obj$Cluster[which(seurat_obj$Cluster %in% c("L2/3 IT","L4/5 IT","L5 IT","L6 IT","L5 PT","L5 NP","L6 CT"))] <- "Excitatory"
#seurat_obj$Cluster[which(seurat_obj$Cluster %in% c("Lamp5","Pvalb","Sst","Vip"))] <- "Inhibitory"
#seurat_obj$Cluster[which(seurat_obj$Cluster %in% c("Neuroblast","Immature IT"))] <- "Immature EN"
#seurat_obj$Cluster[which(seurat_obj$Cluster %in% c("Endo","VLMC"))] <- "Endo/VLMC"

exp_mean <- AverageExpression(
  seurat_obj, 
  features = hub_df$gene_name,
  assays = "RNA",
  slot = "data",
  group.by = "Cluster")
exp_mean_zscore <- as.data.frame(t(scale(t(exp_mean$RNA))))

annotation_row = data.frame(
  Module = rep(M_order,each=20)
)
rownames(annotation_row) <- rownames(exp_mean_zscore)
ann_colors = list(
  Module = M_color
)

breaks <- seq(-2,2,0.01)
col <- colorRampPalette(c("lightblue3", "lightblue", "white", "red", "red4"))(length(breaks))

mat <- exp_mean_zscore[,SubType_order]
mat[mat>2] <- 2
mat[mat< -2] <- -2
Figure_2C <- 
  pheatmap::pheatmap(mat,
         cluster_rows = F, cluster_cols = F,
         breaks = breaks,
         color = col,
         fontsize_col = 10,
         annotation_row = annotation_row,
         annotation_colors = ann_colors,
         annotation_names_row=F, annotation_names_col=F,
         show_colnames = T, show_rownames = F, angle_col=45, border_color=NA
         )
```





```{r fig.width=12, fig.height=6}
p <- PlotKMEs(seurat_obj, ncol=5)

p
```

```{r}
hub_df <- GetHubGenes(seurat_obj, n_hubs = 10)

head(hub_df)
```









